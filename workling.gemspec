# Generated by jeweler
# DO NOT EDIT THIS FILE DIRECTLY
# Instead, edit Jeweler::Tasks in Rakefile, and run the gemspec command
# -*- encoding: utf-8 -*-

Gem::Specification.new do |s|
  s.name = %q{workling}
  s.version = "0.0.1"

  s.required_rubygems_version = Gem::Requirement.new(">= 0") if s.respond_to? :required_rubygems_version=
  s.authors = ["Rany Keddo"]
  s.date = %q{2010-06-22}
  s.description = %q{easily do background work in rails, without commiting to a particular runner. comes with starling, bj and spawn runners.}
  s.email = %q{nicolas@marchildon.net}
  s.extra_rdoc_files = [
    "README.markdown"
  ]
  s.files = [
    "CHANGES.markdown",
     "MIT-LICENSE",
     "README.markdown",
     "Rakefile",
     "TODO.markdown",
     "config/workling.yml",
     "init.rb",
     "install.rb",
     "lib/rude_q/client.rb",
     "lib/workling.rb",
     "lib/workling/base.rb",
     "lib/workling/clients/amqp_client.rb",
     "lib/workling/clients/base.rb",
     "lib/workling/clients/memcache_queue_client.rb",
     "lib/workling/discovery.rb",
     "lib/workling/remote.rb",
     "lib/workling/remote/invokers/base.rb",
     "lib/workling/remote/invokers/basic_poller.rb",
     "lib/workling/remote/invokers/eventmachine_subscriber.rb",
     "lib/workling/remote/invokers/threaded_poller.rb",
     "lib/workling/remote/runners/backgroundjob_runner.rb",
     "lib/workling/remote/runners/base.rb",
     "lib/workling/remote/runners/client_runner.rb",
     "lib/workling/remote/runners/not_remote_runner.rb",
     "lib/workling/remote/runners/spawn_runner.rb",
     "lib/workling/remote/runners/starling_runner.rb",
     "lib/workling/return/store/base.rb",
     "lib/workling/return/store/memory_return_store.rb",
     "lib/workling/return/store/starling_return_store.rb",
     "lib/workling/routing/base.rb",
     "lib/workling/routing/class_and_method_routing.rb",
     "script/bj_invoker.rb",
     "script/listen.rb",
     "script/starling_status.rb",
     "script/workling_client",
     "script/workling_starling_client",
     "test/class_and_method_routing_test.rb",
     "test/clients/memory_queue_client.rb",
     "test/discovery_test.rb",
     "test/invoker_basic_poller_test.rb",
     "test/invoker_eventmachine_subscription_test.rb",
     "test/invoker_threaded_poller_test.rb",
     "test/memcachequeue_client_test.rb",
     "test/memory_return_store_test.rb",
     "test/mocks/client.rb",
     "test/mocks/logger.rb",
     "test/mocks/spawn.rb",
     "test/not_remote_runner_test.rb",
     "test/remote_runner_test.rb",
     "test/return_store_test.rb",
     "test/runners/thread_runner.rb",
     "test/spawn_runner_test.rb",
     "test/starling_return_store_test.rb",
     "test/starling_runner_test.rb",
     "test/test_helper.rb",
     "test/workers/analytics/invites.rb",
     "test/workers/util.rb"
  ]
  s.homepage = %q{http://github.com/elecnix/workling}
  s.rdoc_options = ["--charset=UTF-8"]
  s.require_paths = ["lib"]
  s.rubygems_version = %q{1.3.6}
  s.summary = %q{easily do background work in rails, without commiting to a particular runner. comes with starling, bj and spawn runners.}
  s.test_files = [
    "test/class_and_method_routing_test.rb",
     "test/clients/memory_queue_client.rb",
     "test/discovery_test.rb",
     "test/invoker_basic_poller_test.rb",
     "test/invoker_eventmachine_subscription_test.rb",
     "test/invoker_threaded_poller_test.rb",
     "test/memcachequeue_client_test.rb",
     "test/memory_return_store_test.rb",
     "test/mocks/client.rb",
     "test/mocks/logger.rb",
     "test/mocks/spawn.rb",
     "test/not_remote_runner_test.rb",
     "test/remote_runner_test.rb",
     "test/return_store_test.rb",
     "test/runners/thread_runner.rb",
     "test/spawn_runner_test.rb",
     "test/starling_return_store_test.rb",
     "test/starling_runner_test.rb",
     "test/test_helper.rb",
     "test/workers/analytics/invites.rb",
     "test/workers/util.rb"
  ]

  if s.respond_to? :specification_version then
    current_version = Gem::Specification::CURRENT_SPECIFICATION_VERSION
    s.specification_version = 3

    if Gem::Version.new(Gem::RubyGemsVersion) >= Gem::Version.new('1.2.0') then
    else
    end
  else
  end
end

